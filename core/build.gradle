import org.gradle.internal.os.OperatingSystem

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

archivesBaseName = 'ModernUI-Core'

configurations {
    shadow
}

dependencies {
    implementation "com.ibm.icu:icu4j:${icu4j_version}"
    implementation "it.unimi.dsi:fastutil:${fastutil_version}"

    implementation "org.apache.logging.log4j:log4j-api:${log4j_version}"
    implementation "org.apache.logging.log4j:log4j-core:${log4j_version}"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4j_version}"

    /*api("icyllis.arc3d:Arc3D")
    shadow("icyllis.arc3d:Arc3D") {
        transitive = false
    }*/
    api(project(':external:Arc3D'))
    shadow(project(':external:Arc3D')) {
        transitive = false
    }

    def lwjglNatives
    switch (OperatingSystem.current()) {
        case OperatingSystem.WINDOWS:
            def osArch = System.getProperty("os.arch")
            lwjglNatives = osArch.contains("64")
                    ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                    : "natives-windows-x86"
            break
        case OperatingSystem.MAC_OS:
            lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
            break
        default:
            def osArch = System.getProperty("os.arch")
            lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                    ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                    : "natives-linux"
            break
    }

    implementation platform("org.lwjgl:lwjgl-bom:${lwjgl_version}")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-jemalloc"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-tinyfd"
    implementation "org.lwjgl:lwjgl-vma"
    implementation "org.lwjgl:lwjgl-vulkan"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-jemalloc::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-tinyfd::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-vma::$lwjglNatives"
    if (lwjglNatives == "natives-macos" || lwjglNatives == "natives-macos-arm64") {
        runtimeOnly "org.lwjgl:lwjgl-vulkan::$lwjglNatives"
    }

    testImplementation 'org.openjdk.jmh:jmh-core:1.35'
    testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.35'
}

shadowJar {
    archiveClassifier.set("shadow")
    configurations = [project.configurations.shadow]
}

tasks.register('shadowSourcesJar', Jar) {
    archiveClassifier.set("shadow-sources")
    from sourceSets.main.allSource
    //from fileTree(new File(gradle.includedBuild("Arc3D").projectDir, "src/main/java"))
    from project(':external:Arc3D').sourcesJar.archiveFile.map { zipTree(it) }
}

tasks.register('copyDependencies', Copy) {
    from configurations.runtimeClasspath
    into layout.buildDirectory.dir("output/libs")
}

jar {
    manifest {
        attributes(
                "Specification-Title": project.name,
                "Specification-Vendor": "BloCamLimb",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "BloCamLimb",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        )
    }
}

publishing {
    publications {
        mavenCore(MavenPublication) {
            artifact(shadowJar.archiveFile) {
                builtBy build
            }
            artifact(shadowSourcesJar.archiveFile) {
                builtBy build
                classifier 'sources'
            }
            artifactId = project.name
            groupId = project.group
            version = project.version

            pom {
                artifactId = project.name
                groupId = project.group
                version = project.version
                name = rootProject.name
                packaging = 'pom'
                scm {
                    url = 'https://github.com/BloCamLimb/ModernUI.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/BloCamLimb/ModernUI/issues'
                }
                licenses {
                    license {
                        name = 'LGPL-3.0-or-later'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.en.html'
                        distribution = 'repo'
                    }
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        if (it.group == 'org.lwjgl' || it.group == 'icyllis.arc3d') return
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                    configurations.compileOnly.allDependencies.each {
                        if (it.group == 'org.lwjgl' || it.group == 'icyllis.arc3d') return
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                    configurations.runtimeOnly.allDependencies.each {
                        if (it.group == 'org.lwjgl' || it.group == 'icyllis.arc3d') return
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'runtime')
                    }
                }
            }
        }
    }
}